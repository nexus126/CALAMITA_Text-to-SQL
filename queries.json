[
        {
        "db_id": "centri",
        "original": "Seleziona nome, indirizzo, sito web dei Centri Sportivi di Roma.",
        "query": "SELECT nome_csp, indirizzo, sitoWeb FROM centrosportivo WHERE citta = 'Roma';"
    },
    {
        "db_id": "centri",
        "original": "Contare il numero totale di centri donazione.",
        "query": "SELECT COUNT(*) FROM centrodonazione;"
    },
    {
        "db_id": "centri",
        "original": "Nome,indirizzo e città dei centri donazione che non stanno a Roma.",
        "query": "SELECT nome_cd, indirizzo, citta FROM centrodonazione WHERE citta != 'Roma';"
    },
    {
        "db_id": "centri",
        "original": "Data esatta della convenzione e id dei centri sportivi che hanno convenzioni effettuate con centri donazione nell'anno 2020.",
        "query": "SELECT idSportivo, data_inizio_convenzione_d FROM convenzione_cd WHERE YEAR(data_inizio_convenzione_d)=2020"
    },  
    {
        "db_id": "centri",
        "original": "Restituisci nome,indirizzo e contatti del centro sportivo che ha 5 come id.",
        "query": "SELECT nome_csp,indirizzo,citta,telefono,email,sitoWeb FROM centrosportivo WHERE id=5;"
    },  
    {
        "db_id": "centri",
        "original": "Nome e numero di convenzioni dei centri donazione convenzionati con più di un centro sportivo.",
        "query": "SELECT c.nome_cd, COUNT(*) AS num_convenzioni FROM centrodonazione c JOIN convenzione_cd cc ON c.id = cc.idDonazione GROUP BY c.id HAVING num_convenzioni > 1;"
    },
    {
        "db_id": "centri",
        "original": "nome e numero delle convenzioni con centri sanitari di ogni centro sportivo ordinati per numero decrescente di convenzioni.",
        "query": "SELECT cs.nome_csp, COUNT(*) AS num_convenzioni FROM centrosportivo cs JOIN convenzione_cs cc ON cs.id = cc.idSportivo GROUP BY cs.id ORDER BY num_convenzioni DESC"
    },
    {
        "db_id": "centri",
        "original": "Nome e telefono centri sportivi senza alcun tipo di convenzione",
        "query": "SELECT centrosportivo.nome_csp,centrosportivo.telefono FROM centrosportivo WHERE id NOT IN (SELECT idSportivo FROM convenzione_cd) AND id NOT IN (SELECT idSportivo FROM convenzione_cs);"
    },
    {
        "db_id": "centri",
        "original": "Riporta nome e sito dei centri sportivi con almeno due convenzioni a prescindere dal tipo.",
        "query": "SELECT cs.nome_csp, cs.sitoWeb FROM centrosportivo cs JOIN convenzione_cd cd ON cs.id = cd.idSportivo JOIN convenzione_cs csn ON cs.id = csn.idSportivo GROUP BY cs.id HAVING COUNT(*) > 1;"
    },
    {
        "db_id": "centri",
        "original": "Data più recente di una convenzione fatta con un centro donazione.",
        "query": "SELECT MAX(data_inizio_convenzione_d) FROM convenzione_cd;"
    },
    {
        "db_id": "centri",
        "original": "Seleziona i nomi di tutti i centri sportivi convenzionati con centri donazioni 'AVIS'",
        "query": "SELECT convenzione_cd.idDonazione, convenzione_cd.idSportivo, centrosportivo.nome_csp FROM `convenzione_cd`  JOIN centrodonazione ON convenzione_cd.idDonazione = centrodonazione.id  JOIN centrosportivo ON convenzione_cd.idSportivo = centrosportivo.id WHERE centrodonazione.nome_cd = 'AVIS';"
    },
    {
        "db_id": "centri",
        "original": "Seleziona i nomi di tutti i centri sanitari convenzionati nel comune di Roma",
        "query": "SELECT `nome_csn` FROM `centrosanitario` WHERE `is_convenzionato` = 1 AND citta = 'Roma';"
    },
    {
        "db_id": "centri",
        "original": "Seleziona il nome di tutti i centri sportivi agonistici",
        "query": "SELECT nome_csp FROM centrosportivo WHERE is_agonistico = true;"
    },
    {
        "db_id": "centri",
        "original": "Dammi il numero di centri sportivi per ogni città",
        "query": "SELECT citta, count(*) FROM centrosportivo GROUP BY citta;"
    },
    {
        "db_id": "centri",
        "original": "Dammi tutti i centri sanitari convenzionati",
        "query": "SELECT nome_csn FROM centrosanitario WHERE is_convenzionato = true;"
    },
    {
        "db_id": "centri",
        "original": "Dammi le email di tutti i centri dell'AVIS",
        "query": "SELECT email FROM centrodonazione WHERE nome_cd = 'AVIS';"
    },
    {
        "db_id": "centri",
        "original": "Quanti centri agonistici nel comune di Roma hanno aperto convenzioni dopo il 2020?",
        "query": "SELECT COUNT(centrosportivo.id) FROM `centrosportivo` WHERE `is_agonistico`= true AND citta = 'Roma' AND ( (centrosportivo.id IN (SELECT convenzione_cd.idSportivo FROM convenzione_cd WHERE YEAR(convenzione_cd.data_inizio_convenzione_d) >= 2020 ) ) OR (centrosportivo.id IN (SELECT convenzione_cs.idSportivo FROM convenzione_cs WHERE YEAR(convenzione_cs.data_inizio_convenzione_s) >= 2020) ) )"
    },
    {
        "db_id": "centri",
        "original": "Seleziona i nomi dei centri agonistici e dei centri di donazione che sono convenzionati e che si trovano nella stesso comune",
        "query": "SELECT centrosportivo.nome_csp, centrodonazione.nome_cd FROM convenzione_cd JOIN centrosportivo ON centrosportivo.id = convenzione_cd.idSportivo JOIN centrodonazione ON centrodonazione.id = convenzione_cd.idDonazione WHERE centrosportivo.citta = centrodonazione.citta AND centrosportivo.is_agonistico = true;"
    },
    {
        "db_id": "centri",
        "original": "Trova per ogni centro agonistico il nome del centro donazioni con il quale ha stabilito una convenzione più recentemente, indicando anche il nome del centro sportivo in questione.",
        "query": "SELECT centrosportivo.nome_csp, centrodonazione.nome_cd FROM (SELECT `idSportivo`, MAX(data_inizio_convenzione_d) as data_recente FROM `convenzione_cd` GROUP BY idSportivo) as convenzioni_recenti JOIN convenzione_cd ON convenzioni_recenti.idSportivo = convenzione_cd.idSportivo JOIN centrosportivo ON centrosportivo.id = convenzioni_recenti.idSportivo JOIN centrodonazione ON centrodonazione.id = convenzione_cd.idDonazione WHERE convenzione_cd.data_inizio_convenzione_d = convenzioni_recenti.data_recente"
    },
    {
        "db_id": "bowling",
        "original": "Seleziona cognome e email di ogni giocatore",
        "query": "SELECT cognome_giocatore,email FROM giocatore;"
    },
    {
        "db_id": "bowling",
        "original": "Nome,cognome e contatti dei giocatori nati dal 1990.",
        "query": "SELECT nome_giocatore,cognome_giocatore,email,telefono FROM giocatore WHERE data_di_nascita >= '1990-01-01';  "
    },
    {
        "db_id": "bowling",
        "original": "Numero partite e identificativo dei giocatori che hanno effettuato più di una partita.",
        "query": "SELECT giocatore, COUNT(*) AS num_partite FROM partita GROUP BY giocatore HAVING num_partite>1;"
    },
    {
        "db_id": "bowling",
        "original": "Conta le partite per ogni giorno.",
        "query": "SELECT tenuta_il, COUNT(*) as num_partite FROM partita GROUP BY tenuta_il;"
    },
    {
        "db_id": "bowling",
        "original": "Nome,cognome e punteggio massimo raggiunto da ogni giocatore.",
        "query": "SELECT nome_giocatore, cognome_giocatore, MAX(tot_score) FROM giocatore LEFT JOIN partita ON giocatore.id_giocatore = partita.giocatore GROUP BY giocatore.id_giocatore;"
    },  
    {
        "db_id": "bowling",
        "original": "Identificativo,cognome e numero delle partite effettuate da ogni giocatore.",
        "query": "SELECT partita.giocatore, cognome_giocatore, COUNT(*) FROM giocatore LEFT JOIN partita ON giocatore.id_giocatore = partita.giocatore GROUP BY giocatore.id_giocatore;"
    },
    {
        "db_id": "bowling",
        "original": "Selezionare id e taglia di scarpe e data in cui è nato di ogni giocatore che ha noleggiato scarpe Nike.",
        "query": "SELECT g.nome_giocatore,g.data_di_nascita,s.taglia FROM giocatore g INNER JOIN noleggio n ON g.id_giocatore = n.giocatore INNER JOIN scarpe s ON n.id_scarpe = s.id_scarpe WHERE s.marca = 'Nike';"
    },  
    {
        "db_id": "bowling",
        "original": "Nome e cognome dei giocatori che hanno un punteggio massimo superiore alla media.",
        "query": "SELECT nome_giocatore, cognome_giocatore, max_score FROM giocatore, (SELECT partita.giocatore as id_giocatore, MAX(tot_score) as max_score FROM partita GROUP BY partita.giocatore) as max_punteggi WHERE giocatore.id_giocatore = max_punteggi.id_giocatore AND max_score >= (SELECT AVG(tot_score) FROM partita);"
    },
    {
        "db_id": "bowling",
        "original": "Marca e prezzo delle scarpe che hanno taglia compresa tra 42 e 45",
        "query": "SELECT DISTINCT marca,prezzo FROM scarpe WHERE taglia >= 42 and taglia <= 45;"
    },
    {
        "db_id": "bowling",
        "original": "Conta il numero di giocatori per partita",
        "query": "SELECT ora_inizio,tenuta_il,id_pista, COUNT(*) as tot FROM `partita` GROUP BY ora_inizio,tenuta_il,id_pista;"
    },
    {
        "db_id": "bowling",
        "original": "Conta il numero di piste per ogni impianto",
        "query": "SELECT id_impianto, COUNT(DISTINCT(`id_pista`)) FROM `pista` GROUP BY `id_impianto`;"
    },
    {
        "db_id": "bowling",
        "original": "Conta il numero di abbonati con abbonamento annuale",
        "query": "SELECT COUNT(*) FROM `abbonamento` WHERE tipologia_abbonamento='annuale';"
    },
    {
        "db_id": "bowling",
        "original": "Quanti sono i giocatori nati dopo dal 1990 in poi?",
        "query": "SELECT COUNT(*) FROM `giocatore` WHERE data_di_nascita>='1990-01-01';"
    },
    {
        "db_id": "bowling",
        "original": "Quante piste ha l'impianto 101?",
        "query": "SELECT COUNT(*) FROM `pista` WHERE id_impianto=101;"
    },
    {
        "db_id": "bowling",
        "original": "Quante scarpe numero 42 sono state noleggiate?",
        "query": "SELECT COUNT(*) FROM `scarpe` WHERE `taglia`=42;"
    },
    {
        "db_id": "bowling",
        "original": "A quanto ammonta il costo complessivo delle Nike?",
        "query": "SELECT SUM(prezzo) FROM `scarpe` WHERE marca='Nike';"
    },
    {
        "db_id":"bowling",
        "original": "Seleziona solo il nome e il cognome dei giocatori con abbonamento annuale che nel 2022 hanno giocato almeno 2 partite",
        "query": "SELECT giocatore.nome_giocatore, giocatore.cognome_giocatore FROM giocatore JOIN (SELECT partita.giocatore as id_giocatore, COUNT(*) as num_partite FROM `partita` JOIN abbonamento ON partita.giocatore = abbonamento.giocatore WHERE `tenuta_il`>='2022-01-01' AND `tenuta_il`<='2022-12-31' AND abbonamento.tipologia_abbonamento = 'annuale' GROUP BY partita.giocatore HAVING num_partite >=2) as partite_giocate ON giocatore.id_giocatore = partite_giocate.id_giocatore"
    },
    {
        "db_id": "bowling",
        "original": "Seleziona solo il nome e il cognome dei giocatori con abbonamento annuale che nel 2022 hanno meno di 5 partite",
        "query": "SELECT giocatore.nome_giocatore, giocatore.cognome_giocatore FROM giocatore JOIN (SELECT partita.giocatore as id_giocatore, COUNT(*) as num_partite FROM `partita` JOIN abbonamento ON partita.giocatore = abbonamento.giocatore WHERE `tenuta_il`>='2022-01-01' AND `tenuta_il`<='2022-12-31' AND abbonamento.tipologia_abbonamento = 'annuale' GROUP BY partita.giocatore HAVING num_partite <5) as partite_giocate ON giocatore.id_giocatore = partite_giocate.id_giocatore"
    },
    {
        "db_id":"bowling",
        "original": "Seleziona tutte le piste disponibili per l'impianto nel quale, nel 2021, sono state giocate il maggior numero delle partite, restituendo anche l'identificativo per l'impianto e ordinando per numero identificativo della pista",
        "query": "SELECT impianto_gettonato.id_impianto, pista.id_pista FROM pista JOIN (SELECT partite.id_impianto, COUNT(*) as giocate FROM (SELECT pista.id_impianto, partita.`ora_inizio`, partita.`tenuta_il`, partita.`id_pista` FROM `partita` JOIN pista ON partita.id_pista = pista.id_pista WHERE partita.tenuta_il >= '2021-01-01' AND partita.tenuta_il <= '2021-12-31' GROUP BY pista.id_impianto, partita.`ora_inizio`, partita.`tenuta_il`, partita.`id_pista`) as partite GROUP BY partite.id_impianto ORDER BY giocate DESC LIMIT 1) as impianto_gettonato ON impianto_gettonato.id_impianto = pista.id_impianto WHERE pista.is_disponibile = 1 ORDER BY pista.id_pista"
    },
    {
        "db_id":"bowling",
        "original": "Quali sono i nomi e i cognomi dei giocatori che hanno giocato una partita Mario Rossi?",
        "query": "SELECT giocatore.id_giocatore, `nome_giocatore`, `cognome_giocatore` FROM `giocatore` JOIN partita ON partita.giocatore = giocatore.id_giocatore JOIN (SELECT partita.id_pista, partita.tenuta_il, partita.ora_inizio FROM partita JOIN giocatore ON partita.giocatore = giocatore.id_giocatore WHERE giocatore.nome_giocatore = 'Mario' AND giocatore.cognome_giocatore='Rossi' ) as partite_rossi ON partita.id_pista = partite_rossi.id_pista AND partita.tenuta_il = partite_rossi.tenuta_il AND partite_rossi.ora_inizio = partita.ora_inizio GROUP BY giocatore.id_giocatore;"
    },
    {
        "db_id": "bowling",
        "original": "Quante volte, per ciascuna marca sono state noleggiate scarpe da giocatori con abbonamenti annuali?",
        "query": "SELECT scarpe.marca, COUNT(*) FROM `noleggio` JOIN scarpe ON scarpe.id_scarpe = noleggio.id_scarpe JOIN abbonamento ON abbonamento.giocatore = noleggio.giocatore WHERE abbonamento.tipologia_abbonamento = 'annuale' GROUP BY scarpe.marca"
    },
    {
        "db_id": "bowling",
        "original": "Per ogni impianto, seleziona il numero di giocatori che hanno giocato li, raggruppandoli per anno di nascita",
        "query": "SELECT pista.id_impianto, YEAR(`data_di_nascita`) as anno, COUNT(*) FROM `giocatore` JOIN partita ON partita.giocatore = giocatore.id_giocatore JOIN pista ON partita.id_pista = pista.id_pista GROUP BY anno, pista.id_impianto"
    },
    {
        "db_id": "bowling",
        "original": "Per ogni marca di scarpe, seleziona il numero di giocatori che ne ha noleggiate, raggruppandoli per anno di nascita",
        "query": "SELECT scarpe.marca, YEAR(`data_di_nascita`) as anno, COUNT(*) FROM `giocatore` JOIN noleggio ON noleggio.giocatore = giocatore.id_giocatore JOIN scarpe ON scarpe.id_scarpe = noleggio.id_scarpe GROUP BY anno, scarpe.marca"
    },
    {
        "db_id": "bowling",
        "original": "Seleziona il nome e il cognome dei giocatori che hanno sottoscritto un abbonamento annuale ed il numero di partite che hanno giocato.",
        "query": "SELECT giocatore.nome_giocatore, giocatore.cognome_giocatore, COUNT(*) FROM `abbonamento` JOIN giocatore ON giocatore.id_giocatore = abbonamento.giocatore JOIN partita ON giocatore.id_giocatore = partita.giocatore WHERE abbonamento.tipologia_abbonamento = 'annuale' GROUP BY giocatore.id_giocatore;"
    },
    {
        "db_id": "farma",
        "original": "Nome e principio attivo di ogni farmaco",
        "query": "SELECT NomeCommerciale, PrincipioAttivo FROM farmaco;"
    },   
    {
        "db_id": "farma",
        "original": "Per ogni ricetta nome del farmaco e nome e cognome del paziente a cui è stata fatta.",
        "query": "SELECT f.NomeCommerciale, p.nome_paz, p.cognome_paz FROM farmaco f INNER JOIN ricetta r ON f.Codice = r.Cod_d INNER JOIN paziente p ON r.CodiceFiscale = p.codice_fiscale;"
    },
    {
        "db_id": "farma",
        "original": "Numero di ricette prescritte da ogni medico riportando cognome e numero di telefono di questo.",
        "query": "SELECT m.Cognome,m.recapito_tel, COUNT(r.Matricola) AS 'Numero di ricette' FROM medico m INNER JOIN ricetta r ON m.Matricola = r.Matricola GROUP BY r.Matricola;"
    },  
    {
        "db_id": "farma",
        "original": "Nome e principio attivo dei farmaci disponibili che hanno lo stesso principio attivo.",
        "query": "SELECT f.NomeCommerciale, f.PrincipioAttivo FROM farmaco f WHERE f.PrincipioAttivo IN (SELECT PrincipioAttivo FROM farmaco GROUP BY PrincipioAttivo HAVING COUNT(*) > 1);"
    },  
    {
        "db_id": "farma",
        "original": "Nome delle aziente che producono più di un farmaco riportando anche il numero di farmaci prodotti.",
        "query": "SELECT a.Azienda, COUNT(f.Codice) AS 'Numero di farmaci' FROM farmaco f INNER JOIN (SELECT DISTINCT Azienda FROM farmaco) a ON f.Azienda = a.Azienda GROUP BY a.Azienda HAVING COUNT(f.Codice) > 1;"
    },  
    {
        "db_id": "farma",
        "original": "Seleziona codice fiscale,nome e cognome di ogni paziente restituendo anche il cognome del relativo medico.",
        "query": "SELECT p.codice_fiscale,p.nome_paz, p.cognome_paz, m.Cognome AS Medico FROM paziente p INNER JOIN ricetta r ON p.codice_fiscale = r.CodiceFiscale INNER JOIN medico m ON r.Matricola = m.Matricola;"
    },    
    {
        "db_id": "farma",
        "original": "Data prescrizione e codice fiscale del paziente a cui è stata fatta la ricetta identificata con 14374.",
        "query": "SELECT Data_Prescrizione,CodiceFiscale FROM ricetta WHERE Identificativo = '14374';"
    },  
    {
        "db_id": "farma",
        "original": "Seleziona numero di ricette fatte per ogni farmaco mostrando nome e principio attivo del farmaco.",
        "query": "SELECT f.NomeCommerciale, f.PrincipioAttivo, COUNT(r.Cod_d) AS 'Numero di ricette' FROM farmaco f INNER JOIN ricetta r ON f.Codice = r.Cod_d GROUP BY f.Codice ORDER BY COUNT(r.Cod_d);"
    },
    {
        "db_id": "farma",
        "original": "Seleziona per ogni medico il numero dei pazienti per cui è stata fatta almeno una ricetta riportando nome e cognome del medico.",
        "query": "SELECT m.Nome, m.Cognome, COUNT(DISTINCT p.codice_fiscale) AS 'Numero di pazienti' FROM medico m INNER JOIN ricetta r ON m.Matricola = r.Matricola INNER JOIN paziente p ON r.CodiceFiscale = p.codice_fiscale GROUP BY m.Matricola;"
    },
    {
        "db_id": "farma",
        "original": "Seleziona i nomi di tutti i farmaci prodotti dall'azienda 'Procacci e figli' che hanno un costo superiore ai 5 euro",
        "query": "SELECT `NomeCommerciale` FROM `farmaco` WHERE `Azienda`='Procacci e figli' AND `Prezzo_EUR`>5"
    },
    {
        "db_id": "farma",
        "original": "Calcola per ogni ricetta l'importo da pagare.",
        "query": "SELECT ricetta.Identificativo, SUM(`Prezzo_EUR`) as importo FROM `farmaco` JOIN ricetta ON farmaco.Codice = ricetta.Cod_d GROUP BY ricetta.Identificativo"
    },
    {
        "db_id": "farma",
        "original": "Calcola il numero di farmaci che hanno un costo superiore ai 25 euro.",
        "query": "SELECT COUNT(*) FROM `farmaco` WHERE `Prezzo_EUR` > 25;"
    },
    {
        "db_id": "farma",
        "original": "Quanti pazienti ha il medico con matricola 0010045998832?",
        "query": "SELECT COUNT(codice_fiscale) FROM `paziente` WHERE curante=0010045998832"
    },
    {
        "db_id": "farma",
        "original": "Calcola il prezzo medio dei farmaci che hanno come principio attico il paracetamolo",
        "query": "SELECT AVG(Prezzo_EUR) FROM `farmaco` WHERE `PrincipioAttivo`='Paracetamolo'"
    },
    {
        "db_id": "farma",
        "original": "Calcola il numero di ricette anno per anno",
        "query": "SELECT YEAR(`Data_Prescrizione`) as anno_ricetta, COUNT(*) FROM `ricetta` GROUP BY anno_ricetta;"
    },
    {
        "db_id": "farma",
        "original": "Elenca i cognomi dei pazienti, dopo averli ordinati in ordine alfabetico",
        "query": "SELECT cognome_paz FROM `paziente` ORDER BY cognome_paz"
    },
    {
        "db_id": "farma",
        "original": "Riporta il cognome di ogni medico ed il numero di pazienti che ha.",
        "query": "SELECT medico.Cognome, COUNT(paziente.codice_fiscale) FROM `medico` JOIN paziente ON medico.Matricola = paziente.curante GROUP BY medico.Matricola"
    },
    {
        "db_id": "farma",
        "original": "Per ciascun codice fiscale, conta il numero di ricette per quel paziente che contengono farmaci a base di Paracetamolo",
        "query": "SELECT ricetta.CodiceFiscale, COUNT(ricetta.CodiceFiscale) FROM `ricetta` JOIN farmaco ON farmaco.Codice = ricetta.Cod_d WHERE farmaco.PrincipioAttivo = 'Paracetamolo' GROUP BY ricetta.CodiceFiscale"
    },
    {
        "db_id": "farma",
        "original": "Ritorna l'identificativo delle ricette del 2020 ed il costo complessivo dei farmaci della 'Bocca-Gioberti' in esse prescritti.",
        "query": "SELECT ricetta.Identificativo, SUM(farmaco.Prezzo_EUR) FROM `farmaco` JOIN ricetta ON ricetta.Cod_d = farmaco.Codice WHERE YEAR(ricetta.Data_Prescrizione) = '2020' AND farmaco.Azienda = 'Bocca-Gioberti' GROUP BY ricetta.Identificativo"
    },
    {
        "db_id": "farma",
        "original": "Considera la persona che ha speso di più a causa delle ricette. Trova il nome, cognome e numero di telefono del medico di questa persona.",
        "query": "SELECT medico.Nome, medico.Cognome, medico.recapito_tel FROM medico JOIN paziente ON paziente.curante = medico.Matricola JOIN (SELECT paziente.codice_fiscale, SUM(farmaco.Prezzo_EUR) as spesa FROM `paziente` JOIN ricetta ON ricetta.CodiceFiscale = paziente.codice_fiscale JOIN farmaco ON farmaco.Codice = ricetta.Cod_d GROUP BY paziente.codice_fiscale ORDER BY spesa DESC LIMIT 1 ) as spese_paziente ON spese_paziente.codice_fiscale = paziente.codice_fiscale"
    },
    {
        "db_id": "pratica",
        "original": "Nome,cognome e data di nascita dell'assistente che ha come identificativo 11.",
        "query": "SELECT nome,cognome,nascita FROM assistente WHERE id_assistente = 11;"
    },
    {
        "db_id": "pratica",
        "original": "Seleziona per ogni pratica data di consegna e cognome dell'amministrativo che la gestisce.",
        "query": "SELECT a.cognome, p.data_consegna FROM amministrativo a INNER JOIN pratica p ON a.id_amministrativi = p.amministrativo;"
    },  
    {
        "db_id": "pratica",
        "original": "Nome,cognome e numero di pratiche diverse per ogni assistente.",
        "query": "SELECT ass.nome, ass.cognome, COUNT(pr.codice_pratica) AS 'Numero pratiche' FROM assistente ass INNER JOIN pratica pr ON ass.id_assistente = pr.assistente GROUP BY ass.id_assistente;"
    },
    {
        "db_id": "pratica",
        "original": "Seleziona id,cognome e data assunzione di coloro che hanno assistito almeno una volta all'amministrativo con id pari a 7.",
        "query": "SELECT DISTINCT(ass.id_assistente),ass.cognome AS 'Assistente', ass.assunzione AS 'DataAssunzione' FROM amministrativo a INNER JOIN pratica p ON a.id_amministrativi = p.amministrativo INNER JOIN assistente ass ON p.assistente = ass.id_assistente WHERE a.id_amministrativi = 7;"
    },  
    {
        "db_id": "pratica",
        "original": "Nome,cognome e numero pratiche degli amministrativi che hanno gestito almeno più di una pratica.",
        "query": "SELECT a.nome, a.cognome, COUNT(DISTINCT p.codice_pratica) AS 'Numero pratiche' FROM amministrativo a LEFT JOIN pratica p ON a.id_amministrativi = p.amministrativo GROUP BY a.id_amministrativi HAVING COUNT(DISTINCT p.codice_pratica) > 1;"
    },    
    {
        "db_id": "pratica",
        "original": "Nome,cognome e data di assunzione degli assistenti con id compreso tra 1 e 5 ordinati cronologicamente rispetto alla loro assunzione.",
        "query": "SELECT nome, cognome, assunzione FROM assistente WHERE id_assistente >= 1 and id_assistente <=5 ORDER BY assunzione;"
    },  
    {
        "db_id": "pratica",
        "original": "Seleziona codice e numero di giorni passati tra data di consegna e data di approvazione di ogni pratica.",
        "query": "SELECT codice_pratica,DATEDIFF(data_approvazione,data_consegna) as giorniApprovazione,data_approvazione from pratica;"
    },  
    {
        "db_id": "pratica",
        "original": "Seleziona id,nome,cognome e succursale degli amministrativi le cui pratiche hanno la media dei giorni passati tra data di consegna e data di approvazione superiore alla media dei giorni passati tra data di consegna e data di approvazione di tutte le pratiche.",
        "query": "SELECT id_amministrativi, nome, cognome, succursale FROM amministrativo WHERE id_amministrativi IN ( SELECT amministrativo FROM pratica GROUP BY amministrativo HAVING AVG(DATEDIFF(data_approvazione, data_consegna)) > ( SELECT AVG(DATEDIFF(data_approvazione, data_consegna)) FROM pratica ));"
    },
    {
        "db_id": "pratica",
        "original": "Conta il numero degli amministrativi che hanno gestito almeno una pratica.",
        "query": "SELECT COUNT(DISTINCT(id_amministrativi)) as 'NumeroAmministrativi' FROM amministrativo a WHERE id_amministrativi IN ( SELECT amministrativo FROM pratica );"
    },
    {
        "db_id": "pratica",
        "original": "Seleziona nome,cognome e data nascita degli assistenti che hanno seguito almeno una pratica.",
        "query": "SELECT ass.nome, ass.cognome,ass.nascita FROM assistente ass WHERE id_assistente IN ( SELECT DISTINCT assistente FROM pratica );"
    },
    {
        "db_id": "pratica",
        "original": "Nome e cognome dell'amministrativo che ha gestito la pratica con data di consegna più recente.",
        "query": "SELECT a.nome, a.cognome FROM amministrativo a WHERE a.id_amministrativi IN( SELECT amministrativo FROM pratica WHERE data_consegna = ( SELECT MAX(data_consegna) FROM pratica ) );"
    },
    {
        "db_id": "pratica",
        "original": "Dimmi il nome ed il cognome dell'amministrativo che ha gestito più velocemente la pratica, mostrandomi il suo codice",
        "query": "SELECT a.nome, a.cognome, p.codice_pratica FROM pratica p JOIN amministrativo a ON p.amministrativo = a.id_amministrativi where DATEDIFF(p.data_approvazione,p.data_consegna) = (SELECT DATEDIFF(data_approvazione,data_consegna) as minGiorniApprovazione FROM pratica order by minGiorniApprovazione limit 1);"
    },
    {
        "db_id": "pratica",
        "original": "Dimmi il nome, il cognome, la data di nascita e di assunzione degli assistenti assunti entro i 30 anni di età.",
        "query": "SELECT nome, cognome, nascita, assunzione from assistente where DATEDIFF(assunzione, nascita) < 10957;"
    },
    {
        "db_id": "pratica",
        "original": "Informazioni su tuti gli amministrativi che sono stati assunti prima di compiere i 30 anni.",
        "query": "SELECT * from amministrativo where TIMESTAMPDIFF(year,nascita,assunzione)<30 ;"
    },
    {
        "db_id": "pratica",
        "original": "Riporta solo i cognomi degli amministrativi ordinati rispetto alla loro nascita.",
        "query": "SELECT cognome from amministrativo ORDER BY nascita;"
    },
    {
        "db_id": "pratica",
        "original": "Numero di pratiche per le quali sono passati meno di 3 mesi tra consegna e approvazione",
        "query": "SELECT count(codice_pratica) from pratica where TIMESTAMPDIFF(month,data_consegna,data_approvazione)<3;"
    },
    {
        "db_id": "pratica",
        "original": "Identificativi degli assistenti ordinati in modo crescente rispetto alla differenza tra la data di assunzione e la data di nascita.",
        "query": "SELECT id_assistente from assistente ORDER BY DATEDIFF(assunzione,nascita);"
    },
    {
        "db_id": "pratica",
        "original": "Riporta solo i nomi degli assistenti monstrandoli in ordine cronologico inverso rispetto a quando iniziano a lavorare.",
        "query": "SELECT nome from assistente ORDER BY inizio_assistenza DESC;"
    },
    {
        "db_id": "pratica",
        "original": "Riporta id dell'assistente e numero di pratiche degli assistenti che hanno gestito più di una pratica ordinandoli per identificativo crescente.",
        "query": "SELECT assistente, COUNT(*) AS num_pratiche FROM pratica GROUP BY assistente HAVING num_pratiche > 1 ORDER BY assistente ;"
    },
    {
        "db_id": "pratica",
        "original": "Mostra codice pratica,data di consegna,nome,cognome e data di nascita degli assistenti che hanno gestito pratiche approvate meno di 5 mesi dopo la loro consegna ordinando tutto cronologicamente rispetto alla data di nascita degli assistenti.",
        "query": "SELECT p.codice_pratica,p.data_consegna,a.nome,a.cognome,a.nascita FROM pratica p JOIN assistente a ON p.assistente = a.id_assistente WHERE a.nascita > '1990-12-31' and TIMESTAMPDIFF(month,data_consegna,data_approvazione)<5 ORDER BY nascita DESC;"
    },
    {
        "db_id": "pratica",
        "original": "Mostrare codice della pratica,cognome dell'assistente e cognome dell'amministrativo che le hanno gestite ordinati cronologicamente per data di assunzione dell'assitente.",
        "query": "SELECT p.codice_pratica, a.cognome, am.cognome FROM pratica p JOIN assistente a ON p.assistente = a.id_assistente   JOIN amministrativo am ON p.amministrativo = am.id_amministrativi WHERE p.assistente = 1 or p.assistente=5 ORDER BY a.assunzione;"
    },
    {
        "db_id": "pratica",
        "original": "Seleziona tutte le informazioni sugli amministrativi per i quali la differenza tra data di assunzione e data di nascita è inferiore alla media.",
        "query": "SELECT * from amministrativo where DATEDIFF(assunzione,nascita) < (SELECT avg(DATEDIFF(assunzione,nascita)) from amministrativo);"
    },
    {
        "db_id": "voli",
        "original": "Seleziona numero di volo, data e areoporto dei voli da maggio 2020 in poi.",
        "query": "SELECT numero_volo,data,aeroporto FROM volo WHERE data >= '2020-05-1';"
    },
    {
        "db_id": "voli",
        "original": "Passaporto e nazionalità dei clienti di sesso maschile.",
        "query": "SELECT num_passaporto,naz FROM cliente WHERE gender = 'M';"
    },
        
    {
        "db_id": "voli",
        "original": "Per ogni biglietto nome,cognome e sesso del cliente,data del volo e modello dell'aereo.",
        "query": "SELECT c.nome, c.cognome, v.data, a.modello_di_aereo FROM cliente c INNER JOIN biglietto b ON c.num_passaporto = b.num_passaporto INNER JOIN volo v ON b.volo = v.numero_volo INNER JOIN aereo a ON v.aereo = a.cod_aereo;"
    },  
    {
        "db_id": "voli",
        "original": "Seleziona nome cognome e spesa totale di ogni cliente che ha speso per l'acquisto di biglietti una cifra che è almeno 800.",
        "query": "SELECT c.nome,c.cognome, SUM(b.costo_euro) AS 'Spesa totale' FROM cliente c INNER JOIN biglietto b ON c.num_passaporto = b.num_passaporto GROUP BY c.num_passaporto HAVING SUM(b.costo_euro) > 799;"
    },   
    {
        "db_id": "voli",
        "original": "La somma dei costi di tutti i biglietti.",
        "query": "SELECT SUM(b.costo_euro) AS 'Incasso Totale' FROM biglietto b;"
    },
    {
        "db_id": "voli",
        "original": "Seleziona nome,cognome e codice di biglietto dei clienti di sesso non maschile.",
        "query": "SELECT nome, cognome, num_b as 'codice_biglietto' FROM cliente,biglietto WHERE gender != 'M' and cliente.num_passaporto=biglietto.num_passaporto;"
    },     
    {
        "db_id": "voli",
        "original": "Riporta per ogni volo la data , il modello dell'aereo e il numero di passeggeri che hanno acquistato il biglietto per quel volo.",
        "query": "SELECT v.data, a.modello_di_aereo, COUNT(*) AS 'Passeggeri' FROM volo v INNER JOIN aereo a ON v.aereo = a.cod_aereo INNER JOIN biglietto b ON v.numero_volo = b.volo GROUP BY v.numero_volo;"
    },
    {
        "db_id": "voli",
        "original": "Capienza massima raggiuna da un aereo.",
        "query": "SELECT MAX(num_posti) as 'capienza massima' from aereo;"
    }, 
    {
        "db_id": "voli",
        "original": "Seleziona codice aereo,compagnia,modello e capienza degli aerei che hanno capienza massima.",
        "query": "SELECT cod_aereo,comp,modello_di_aereo,num_posti as 'capienza' from aereo where num_posti in (SELECT MAX(Num_posti) as 'capienza massima' from aereo);"
    },
    {
        "db_id": "voli",
        "original": "Per ogni compagnia riportare il numero di voli che partono o dall'aereoporto identificato con REK o dall'aereoporto identificato con EBB.",
        "query": "SELECT comp,COUNT(DISTINCT(numero_volo)) as 'numero voli' from volo where aeroporto='REK' or aeroporto='EBB' GROUP BY comp;"
    },
    {
        "db_id": "voli",
        "original": "Seleziona il numero di persone diviso per nazionalità che hanno preso il volo numero QY4009",
        "query": "SELECT c.naz, COUNT(*) AS numero_persone FROM cliente c JOIN biglietto b ON c.num_passaporto = b.num_passaporto WHERE b.volo='BH9973' GROUP BY c.naz;"
    },
    {
        "db_id": "voli",
        "original": "Dimmi quali aerei ritornano nell'aeroporto in cui sono partiti lo stesso giorno, riportando il nome dell'aeroporto",
        "query": "SELECT v1.aereo FROM volo v1 JOIN volo v2 ON v1.aereo = v2.aereo WHERE v1.p_a = 'part' AND v2.p_a = 'arr' AND v1.aeroporto = v2.aeroporto AND DATEDIFF(v1.data,v2.data) < 1;"
    },
    {
        "db_id": "voli",
        "original": "Restituisci tutte le informazioni su ogni biglietto ordinate per costo decrescente del biglietto.",
        "query": "SELECT * from biglietto ORDER BY costo_euro DESC;"
    },
    {
        "db_id": "voli",
        "original": "Spesa fatta da ogni persona per l'acquisto di biglietti riportando solo la spesa.",
        "query": "SELECT SUM(costo_euro) from biglietto GROUP BY num_passaporto;"
    },
    {
        "db_id": "voli",
        "original": "Ritorna la lista delle informazioni sui clienti ordinati per cognome.",
        "query": "select * from cliente ORDER BY cognome;"
    },
    {
        "db_id": "voli",
        "original": "Cognome sesso e data di nascita di coloro che hanno almeno un biglietto.",
        "query": "SELECT DISTINCT cognome,gender,data from biglietto,cliente WHERE cliente.num_passaporto=biglietto.num_passaporto;"
    },
    {
        "db_id": "voli",
        "original": "Riportare le compagnie per numero di voli in partenza ordinate in maniera crescente su questi ultimi.",
        "query": "SELECT comp,COUNT(p_a) as partenze from volo group by comp ORDER BY partenze ASC;"
    },
    {
        "db_id": "coronavirus",
        "original": "Selezionare nome e cognome dei guariti di marzo 2020.",
        "query": "SELECT nome,cognome FROM guariti,infetti,persone WHERE guariti.id_infezione=infetti.id_infezione and infetti.persona=persone.cod_fiscale and DATE(data_guarigione) LIKE '2020-03%';"
    },  
    {
        "db_id": "coronavirus",
        "original": "Riporta numero totale di infezioni.",
        "query": "SELECT COUNT(*) FROM infetti;"
    },
    {
        "db_id": "coronavirus",
        "original": "Conta numero totale di infezioni che non sono asintomatiche o lievi.",
        "query": "SELECT COUNT(*) FROM infetti WHERE stato != 'asintomatico' and stato != 'lieve';"
    },
        
    {
        "db_id": "coronavirus",
        "original": "Riporta numero totale di infetti,numero totale di guarizioni e numero totale di decessi.",
        "query": "SELECT (SELECT COUNT(*) FROM infetti) AS Infetti, (SELECT COUNT(*) FROM guariti) AS Guariti, (SELECT COUNT(*) FROM deceduti) AS Deceduti;"
    },
        
    {
        "db_id": "coronavirus",
        "original": "Seleziona sesso,comune di nascita e data di infezione degli infetti gravi.",
        "query": "SELECT p.sesso,p.nas_comune,i.data_infezione FROM persone p INNER JOIN infetti i ON p.cod_fiscale = i.persona WHERE i.stato = 'grave' ORDER BY i.data_infezione;"
    },   
    {
        "db_id": "coronavirus",
        "original": "Conta numero di persone che si sono infettate almeno una volta raggruppate per professione riportando la professione.",
        "query": "SELECT professione,COUNT(DISTINCT p.cod_fiscale) AS NumeroInfetti FROM persone p JOIN infetti i ON p.cod_fiscale = i.persona GROUP BY p.professione;"
    },    
    {
        "db_id": "coronavirus",
        "original": "Calcola l'età media delle persone rispetto al 31 dicembre 2020.",
        "query": "SELECT AVG(TIMESTAMPDIFF(year,data_nascita,'2020-12-31')) as eta_media from persone;"
    },      
    {
        "db_id": "coronavirus",
        "original": "Seleziona nome,cognome e stato civile delle persone decedute a causa di un'infezione grave.",
        "query": "SELECT nome,cognome,stato_civile from infetti,deceduti,persone where persone.cod_fiscale=infetti.persona and infetti.id_infezione=deceduti.id_infezione and infetti.stato='grave';"
    },  
    {
        "db_id": "coronavirus",
        "original": "Codice fiscale,nome e cognome delle persone coniugate che si sono infette almeno una volta.",
        "query": "select DISTINCT(persone.cod_fiscale),nome,cognome from infetti,persone where infetti.persona=persone.cod_fiscale and (persone.stato_civile='coniugato' or persone.stato_civile='coniugata');"
    },
    {
        "db_id": "coronavirus",
        "original": "Riporta l'eta media delle persone di sesso maschile e l'eta media delle persone di sesso femminile.",
        "query": "SELECT (SELECT AVG(TIMESTAMPDIFF(year,data_nascita,'2020-12-31')) from persone where persone.sesso='M') AS eta_media_maschile,(SELECT AVG(TIMESTAMPDIFF(year,data_nascita,'2020-12-31')) as eta_media from persone where persone.sesso='F') as eta_media_femminile;"
    },
    {
        "db_id": "coronavirus",
        "original": "Seleziona i codici fiscali di tutti i guariti nati a partire dal 1950.",
        "query": "SELECT `cod_fiscale` FROM persone JOIN infetti ON persone.cod_fiscale = infetti.persona JOIN guariti ON infetti.id_infezione = guariti.id_infezione WHERE `data_nascita`>='1950-01-01';"
    },
    {
        "db_id": "coronavirus",
        "original": "Seleziona il numero di deceduti residenti nel comune con codice 'H059'",
        "query": "SELECT COUNT(persone.cod_fiscale) FROM `persone` JOIN infetti ON persone.cod_fiscale = infetti.persona JOIN deceduti ON infetti.id_infezione = deceduti.id_infezione WHERE persone.`res_comune`='E548';"
    },
    {
        "db_id": "coronavirus",
        "original": "Riporta solo le date di morte dei deceduti ordinate in maniera crescente rispetto all'identificato dell'infezione che le ha causate.",
        "query": "SELECT data_decesso from deceduti ORDER BY id_infezione;"
    },
    {
        "db_id": "coronavirus",
        "original": "Restituisci esclusivamente le persone infette ordinate a partire da quelle infettate più recentemente.",
        "query": "SELECT persona from infetti ORDER BY data_infezione DESC;"
    },
    {
        "db_id": "coronavirus",
        "original": "Seleziona solo la data di nascita della persona più giovane.",
        "query": "SELECT MAX(data_nascita) from persone;"
    },
    {
        "db_id": "coronavirus",
        "original": "Seleziona tra le persone registrate il numero di infermieri caposala.",
        "query": "SELECT COUNT(cod_fiscale) from persone where professione='Infermiere Caposala';"
    },
    {
        "db_id": "coronavirus",
        "original": "Seleziona i nomi e i cognomi di tutti gli uomini che si sono infettati.",
        "query": "SELECT persone.nome, persone.cognome FROM `infetti` JOIN persone ON persone.cod_fiscale = infetti.persona WHERE persone.sesso = 'M';"
    },
    {
        "db_id": "coronavirus",
        "original": "Quanti infetti gravi sono guariti?",
        "query": "SELECT COUNT(*) FROM `infetti` JOIN guariti ON infetti.id_infezione = guariti.id_infezione WHERE infetti.stato = 'grave';"
    },
    {
        "db_id": "coronavirus",
        "original": "Nome,cognome e codice fiscale dei guariti la cui età è superiore all'età media di tutti gli individui registrati, ordinarti in maniera cronologicamente inversa rispetto all'età. ",
        "query": "SELECT nome,cognome,persone.cod_fiscale from persone,infetti,guariti where infetti.persona=persone.cod_fiscale and infetti.id_infezione=guariti.id_infezione and TIMESTAMPDIFF(year,data_nascita,CURDATE())<(SELECT AVG(TIMESTAMPDIFF(year,data_nascita,CURDATE())) from persone) ORDER BY data_nascita DESC;"
    },
    {
        "db_id": "coronavirus",
        "original": "Nell'anno in cui c'e' stato il maggior numero di infetti, quanti sono guariti?",
        "query": "SELECT COUNT(infetti.id_infezione) FROM guariti JOIN infetti ON infetti.id_infezione = guariti.id_infezione WHERE YEAR(infetti.data_infezione) = (SELECT anno FROM (SELECT YEAR(data_infezione) as anno, COUNT(*) as numero_infetti FROM `infetti` GROUP BY anno ORDER BY numero_infetti DESC LIMIT 1) as infetti_anno);"
    },
    {
        "db_id": "hackathon",
        "original": "Conta numero di sedi per stato riportando lo stato.",
        "query": "SELECT nazione,COUNT(*) as num_sedi FROM Sede GROUP BY nazione;"
    },  
    {
        "db_id": "hackathon",
        "original": "Nome e data di inizio degli hackhathon che durano meno di tre giorni.",
        "query": "SELECT nome_evento,starting_date FROM Hackathon where TIMESTAMPDIFF(day,starting_date,ending_date)<=2;"
    },  
    {
        "db_id": "hackathon",
        "original": "Numero di hackathon organizzati da ogni società mostrando anche la sede legale della società.",
        "query": "SELECT nomeSocieta,sede_legale, COUNT(*) as num_hackathon FROM Hackathon,Societa where Societa.nomeSocieta=organizzatore GROUP BY organizzatore ORDER BY num_hackathon DESC;"
    },  
    {
        "db_id": "hackathon",
        "original": "Seleziona nome,data di inizio,data di fine e nome della società organizzante degli hackathon che si svolgono in più di una sede.",
        "query": "SELECT h.nome_evento,h.starting_date,h.ending_date,h.organizzatore FROM Hackathon h JOIN Avere_luogo al ON h.ID = al.IDevento GROUP BY h.ID HAVING COUNT(*) > 1;"
    },  
    {
        "db_id": "hackathon",
        "original": "Per ogni hackathon riportare il nome,la società che lo organizza e il numero di sedi in cui si svolge.",
        "query": "SELECT h.nome_evento,h.organizzatore, (SELECT COUNT(DISTINCT nome_sede) FROM Avere_luogo WHERE IDevento = h.ID) as numero_sedi FROM Hackathon h JOIN Societa s ON h.organizzatore = s.nomeSocieta;"
    },
    {
        "db_id": "hackathon",
        "original": "Seleziona nome degli hackathon che hanno almeno una sede in cui si svolgono che sia in Italia riportando anche data di fine evento,nome della società organizzatrice, sede dell'evento e città in cui si trova la sede dell'evento. ",
        "query": "SELECT h.nome_evento,ending_date,organizzatore,GROUP_CONCAT(s.nome) as sedi,GROUP_CONCAT(s.comune) as citta FROM Hackathon h JOIN Avere_luogo al ON h.ID = al.IDevento JOIN Sede s ON al.nome_sede = s.nome WHERE s.nazione = 'Italia' GROUP BY h.ID;"
    },
    {
        "db_id": "hackathon",
        "original": "Data di inizio,data di conclusione e nome delle città in cui si svolgono gli hackathon iniziati e conclusi tra il 2011 e il 2019.",
        "query": "SELECT starting_date,ending_date,Sede.comune from Hackathon,Sede,Avere_luogo where starting_date>='2011-01-01' and ending_date<='2019-12-31' and Hackathon.ID=Avere_luogo.IDevento and Avere_luogo.nome_sede=Sede.nome;"
    },
    {
        "db_id": "hackathon",
        "original": "Selezionare nome degli hackathon,data di inizio,nome delle sedi(concatenati se più di uno) in cui si svolgono e nome delle società che li organizzano ordinati cronologicamente da quello che finisce prima a quello che finisce dopo.",
        "query": "SELECT h.nome_evento,h.starting_date, GROUP_CONCAT(s.nome) as sedi, so.nomeSocieta as societa FROM Hackathon h JOIN Avere_luogo a ON h.ID = a.IDevento JOIN Sede s ON a.nome_sede = s.nome JOIN Societa so ON h.organizzatore = so.nomeSocieta GROUP BY h.ID ORDER BY starting_date;"
    },
    {
        "db_id": "hackathon",
        "original": "Restituisci la media dei giorni di durata degli hackathon.",
        "query": "SELECT AVG(TIMESTAMPDIFF(day,starting_date,ending_date)) as media_durata_giorni from Hackathon;"
    },
    {
        "db_id": "hackathon",
        "original": "Dammi il nome, il numero telefonico e l'indirizzo delle società che hanno organizzato almeno 2 hackathon",
        "query": "select s.nomeSocieta, s.sede_legale, s.contattoTelefonico FROM (select organizzatore, count(organizzatore) from Hackathon group by organizzatore HAVING COUNT(*) >= 2) as T JOIN Societa s ON T.organizzatore = s.nomeSocieta;"
    },
    {
        "db_id": "hackathon",
        "original": "Dammi i nomi degli hackathon con la loro data di inizio e sede che sono durati più di due giorni",
        "query": "SELECT h.nome_evento, h.starting_date, s.nome FROM Hackathon h JOIN Avere_luogo a ON h.ID = a.IDevento JOIN Sede s ON a.nome_sede = s.nome JOIN Societa so ON h.organizzatore = so.nomeSocieta WHERE TIMESTAMPDIFF(day,starting_date,ending_date) >= 3;"
    },
    {
        "db_id": "hackathon",
        "original": "Informazioni sulle società per cui è riportato un contatto telefonico.",
        "query": "SELECT * from Societa where contattoTelefonico IS NOT NULL;"
    },
    {
        "db_id": "hackathon",
        "original": "Numero di eventi tenutisi nell'università Sapienza.",
        "query": "select COUNT(IDevento) from Avere_luogo where nome_sede='Universita Sapienza';"
    },
    {
        "db_id": "hackathon",
        "original": "Riportare l'insieme dei nomi degli hackathon ordinati per data di inizio da quella più recente a quella meno recente.",
        "query": "select nome_evento from Hackathon ORDER BY starting_date DESC;"
    },
    {
        "db_id": "hackathon",
        "original": "Riportare numero di sedi di società che non si trovano in USA",
        "query": "select COUNT(nome) from Sede where nazione!='USA';"
    },
    {
        "db_id": "hackathon",
        "original": "Titolo dell'hackathon,data di termine e sede dell'evento degli hackathon ordinati alfabeticamente in maniera inversa per nome della sede.",
        "query": "SELECT nome_evento,ending_date,nome_sede from Hackathon,Avere_luogo where Hackathon.ID=Avere_luogo.IDevento ORDER BY (nome_sede) DESC;"
    },
    {
        "db_id": "hackathon",
        "original": "Restituire nome della società e nome della sede legale delle società che hanno sede legale che non sia nè in Italia e né in USA e per le quali si ha un numero di telefono registrato.",
        "query": "select Societa.nomeSocieta,Societa.sede_legale from Sede,Societa where nazione!='USA' and nazione!='Italia' and Sede.nome=Societa.sede_legale and contattoTelefonico IS NOT NULL;"
    },
    {
        "db_id": "hackathon",
        "original": "Mostrare nome degli hackathon,nome organizzatori, sedi legali degli organizzatori ,data di inizio e giorni di durata degli hackathon iniziati tra il 2012 e il 2014 ordinati cronologicamente per data di inizio.",
        "query": "SELECT h.nome_evento, s.nomeSocieta, s.sede_legale,starting_date,DATEDIFF(ending_date,starting_date)  FROM Hackathon h JOIN Societa s ON h.organizzatore = s.nomeSocieta WHERE h.starting_date BETWEEN '2012-01-01' AND '2014-12-31' ORDER BY starting_date;"
    },
    {
        "db_id": "hackathon",
        "original": "Selezionare le sedi dove si sono svolti hackathon organizzati da tutte le società eccetto 'NASA' riportando nome sede e nome hackathon.",
        "query": "SELECT DISTINCT nome_sede,nome_evento FROM Avere_luogo a JOIN Hackathon h ON a.IDEvento = h.ID JOIN Societa s ON h.organizzatore = s.nomeSocieta WHERE s.nomeSocieta != 'NASA';"
    },
    {
        "db_id": "galleria",
        "original": "Nome e anno pubblicazione delle opere con identificativo compreso tra 5 e 11",
        "query": "SELECT nome,anno_pubblicazione FROM Opera WHERE ID >= 5 and ID<=11;"
    },
    {
        "db_id": "galleria",
        "original": "Nome delle opere e cognome degli artisti delle opere novecentesche.",
        "query": "SELECT Opera.nome,Artista.cognome FROM Opera,Crea,Artista WHERE Opera.ID=Crea.opera and Crea.Artista=Artista.ID and (anno_pubblicazione >= 1900 and anno_pubblicazione<2000);"
    },
    {
        "db_id": "galleria",
        "original": "Numero di opere per anno di pubblicazione",
        "query": "SELECT anno_pubblicazione, COUNT(*) as numero_opere FROM Opera GROUP BY anno_pubblicazione;"
    },
    {
        "db_id": "galleria",
        "original": "Nome,Cognome e opere degli artisti di francesi e tedeschi riportando su una sola riga i nomi delle opere concatenandoli.",
        "query": "SELECT a.nome,a.cognome, GROUP_CONCAT(o.nome) AS opere FROM Artista a JOIN Crea c ON a.ID = c.artista JOIN Opera o ON c.opera = o.ID WHERE a.nazione IN ('Francia','Germania') GROUP BY a.ID;"
    },
    {
        "db_id": "galleria",
        "original": "Cognomi degli artisti per cui ci sono in galleria almeno due opere pubblicate tra il 1880 e il 1910.",
        "query": "SELECT a.cognome FROM Artista a JOIN Crea c ON a.ID = c.artista JOIN Opera o ON c.opera = o.ID WHERE o.anno_pubblicazione BETWEEN 1880 AND 1910 GROUP BY a.ID HAVING COUNT(*) >= 2;"
    },  
        
    {
        "db_id": "galleria",
        "original": "Nome,anno di pubblicazione e cognome delle opere di Monet e Cezanne riportando anche i cognomi degli autori.",
        "query": "SELECT o.nome,o.anno_pubblicazione, a.cognome FROM Opera o JOIN Crea c ON o.ID = c.opera JOIN Artista a ON c.artista = a.ID WHERE a.cognome IN ('Monet', 'Cezanne') ORDER BY o.anno_pubblicazione;"
    },  
    {
        "db_id": "galleria",
        "original": "Top 5 artisti con maggior numero di opere riportando cognome di ogni artista e numero di opere.",
        "query": "SELECT cognome, num_opere FROM (SELECT a.cognome, SUM(num_opere) AS num_opere FROM Artista a JOIN (SELECT artista, COUNT(*) AS num_opere FROM Crea GROUP BY artista) t ON a.ID = t.artista GROUP BY a.ID) x ORDER BY num_opere DESC LIMIT 5;"
    },  
    {
        "db_id": "galleria",
        "original": "Numero medio di opere per artista.",
        "query": "SELECT AVG(num_opere) AS media FROM (SELECT COUNT(*) AS num_opere FROM Crea GROUP BY artista) t;"
    },  
    {
        "db_id": "galleria",
        "original": "Media delle opere degli artisti per nazione riportando la nazione.",
        "query": "SELECT nazione, AVG(num_opere) AS media FROM ( SELECT a.nazione, a.ID, COUNT(*) AS num_opere FROM Artista a JOIN Crea c ON a.ID = c.artista GROUP BY a.ID, a.nazione ) t GROUP BY nazione;"
    },
    {
        "db_id": "galleria",
        "original": "Numero di opere per movimento artistico.",
        "query": "SELECT movimento,COUNT(Opera.ID) as numero_opere from Opera,Artista,Crea where Opera.ID=Crea.opera and Artista.ID=Crea.Artista GROUP BY movimento;"
    },
    {
        "db_id": "galleria",
        "original": "Seleziona il nome di tutte le opere che Henri Matisse ha realizzato per Ščukin.",
        "query": "SELECT opera.`nome` FROM `opera` JOIN Crea ON Crea.opera = opera.ID JOIN artista ON artista.ID = Crea.artista WHERE artista.nome = 'Henri' AND artista.cognome = 'Matisse' AND Crea.committente = 'Ščukin'"
    },
    {
        "db_id": "galleria",
        "original": "Seleziona il museo che ospita il maggior numero di opere di Monet.",
        "query": "SELECT opera.id_museo as museo, COUNT(opera.ID) as tot_opere FROM `opera` JOIN Crea ON opera.ID = Crea.opera JOIN artista ON artista.ID = Crea.artista WHERE artista.cognome = 'Monet' GROUP BY artista.ID, opera.id_museo ORDER BY tot_opere DESC LIMIT 1"
    },
    {
        "db_id": "galleria",
        "original": "Dimmi i cognomi degli artisti francesi",
        "query": "SELECT cognome FROM Artista WHERE nazione = 'Francia';"
    },
    {
        "db_id": "galleria",
        "original": "Conta il numero di artisti impressionisti per ogni nazione",
        "query": "SELECT nazione, count(nazione) FROM Artista WHERE movimento = 'Impressionismo' GROUP BY nazione;"
    },
    {
        "db_id": "galleria",
        "original": "Conta il numero di opere richieste da ogni committente",
        "query": "SELECT count(opera), committente FROM Crea GROUP BY committente;"
    },
    {
        "db_id": "galleria",
        "original": "Dimmi i cognomi degli artisti che hanno il nome d'arte",
        "query": "SELECT cognome FROM Artista WHERE nome_darte != NULL;"
    },
    {
        "db_id": "galleria",
        "original": "Dimmi quante opere sono state create ogni anno",
        "query": "SELECT anno_pubblicazione, count(anno_pubblicazione) FROM opera GROUP BY anno_pubblicazione;"
    },
    {
        "db_id": "galleria",
        "original": "Dimmi il nome delle opere grandi 48x63",
        "query": "SELECT nome FROM Opera WHERE dimensioni = '48x63';"
    },
    {
        "db_id": "galleria",
        "original": "Dimmi tutte le opere fatte con la tecnica olio su tela",
        "query": "SELECT nome FROM Opera WHERE tecnica = 'olio su tela';"
    },
    {
        "db_id": "galleria",
        "original": "Dimmi quante opere sono state fatte nel 1872",
        "query": "SELECT COUNT(*) as number FROM Opera WHERE anno_pubblicazione = 1872;"
    },
    {
        "db_id": "galleria",
        "original": "Dimmi le opere e la data di pubblicazione fatte da Monet ordinate per data",
        "query": "SELECT opera.nome, opera.anno_pubblicazione FROM opera JOIN Crea ON opera.ID = Crea.opera JOIN artista ON artista.ID = Crea.artista WHERE artista.cognome = 'Monet' ORDER BY anno_pubblicazione DESC;"
    },
    {
        "db_id": "galleria",
        "original": "Dimmi il nome ed il cognome degli artisti che espongono nel museo 'Barnes Foundation' ordinate in ordine alfabetico per il cognome",
        "query": "SELECT artista.nome, artista.cognome FROM opera JOIN Crea ON opera.ID = Crea.opera JOIN artista ON artista.ID = Crea.artista WHERE opera.id_museo = 'Barnes Foundation' ORDER BY artista.cognome;"
    },
    {
        "db_id": "galleria",
        "original": "Dimmi le opere ad acquarello ed olio su tela che ha fatto monet e dove sono esposte ordinate per titolo",
        "query": "SELECT opera.nome, opera.id_museo FROM opera JOIN Crea ON opera.ID = Crea.opera JOIN artista ON artista.ID = Crea.artista WHERE artista.cognome = 'Monet' AND opera.tecnica IN ('acquarello', 'olio su tela') ORDER BY opera.nome;"
    },
    {
        "db_id": "farmacia",
        "original": "Numero di prodotti pubblicati da ogni società riportando anche il nome della società.",
        "query": "SELECT casaProduzione, COUNT(*) as num_prodotti FROM prodotti GROUP BY casaProduzione;"
    },  
    {
        "db_id": "farmacia",
        "original": "Selezionare le vendite effettuate nel marzo 2020 ordinate per incasso totale crescente e riportare per ognuna di esse la società e l'incasso totale.",
        "query": "SELECT farmacie.nome_negozio,totale as incasso FROM vendite,farmacie WHERE vendite.negozio=farmacie.partita_iva and MONTH(data_fatturazione) = 3 AND YEAR(data_fatturazione) = 2020 ORDER BY incasso;"
    },    
    {
        "db_id": "farmacia",
        "original": "Riporta nome e totale del fatturato di ogni farmacia ordinando per fatturato decrescente.",
        "query": "SELECT farmacie.nome_negozio, SUM(totale) AS fatturato FROM vendite,farmacie where vendite.negozio=farmacie.partita_iva GROUP BY negozio ORDER BY fatturato DESC;"
    },
    {
        "db_id": "farmacia",
        "original": "Nome,tipologia e prezzo dei prodotti il cui prezzo è inferiore al prezzo medio dei prodotti.",
        "query": "SELECT p.nome_commerciale,p.tipologiaProd,p.prezzo_eu FROM prodotti p WHERE prezzo_eu < ( SELECT AVG(prezzo_eu) FROM prodotti);"
    },     
    {
        "db_id": "farmacia",
        "original": "Prezzo medio dei prodotti.",
        "query": "SELECT AVG(prezzo_eu) as prezzo_medio FROM prodotti;"
    },       
    {
        "db_id": "farmacia",
        "original": "Seleziona per ogni mese il numeo di vendite,la quantità di articoli venduti e il totale che è stato fatturato riportando mese,numero di vendite,quantità di articoli venduti e totale fatturato",
        "query": "SELECT MONTH(data_fatturazione) AS mese, COUNT(*) AS num_vendite, SUM(quantitaVenduta) AS tot_quantita, SUM(totale) AS tot_fatturato FROM vendite GROUP BY MONTH(data_fatturazione);"
    },
    {
        "db_id": "farmacia",
        "original": "Numero di farmacie per comune riportando il nome del comune.",
        "query": "SELECT nomeComune,count(nomeComune) as num_farmacie from farmacie GROUP BY nomeComune;"
    }, 
    {
        "db_id": "farmacia",
        "original": "Numero di vendite raggruppati per utente considerando solo quelle fatte presso farmacie di Roma.",
        "query": "SELECT acquirente,count(id) as num_acquisti from vendite,farmacie where vendite.negozio= farmacie.partita_iva and farmacie.nomeComune='Roma' GROUP BY acquirente;"
    },
    {
        "db_id": "farmacia",
        "original": "Nome,data di pubblicazione e quantità vendute del prodotto che è stato venduto maggiormente per quantità.",
        "query": "SELECT nome_commerciale,data_di_rilascio, SUM(quantitaVenduta) as totale FROM vendite,prodotti where prodotto=prodotti.cod_identificativo GROUP BY prodotto ORDER BY totale DESC LIMIT 1;"
    },   
    {
        "db_id": "farmacia",
        "original": "Nome,comune,indirizzo,cap e latitudine delle farmacie ordinate a partire da quella con latitudine maggiore.",
        "query": "SELECT nome_negozio,nomeComune,inizio_attivita,cap,coordinate from farmacie ORDER BY coordinate DESC;"
    },
    {
        "db_id": "farmacia",
        "original": "Calcola il ricavo medio dell'anno 2020 per ogni farmacia indicandone il nome e la partita iva.",
        "query": "SELECT farmacie.nome_negozio, farmacie.partita_iva, AVG('totale') as ricavo_megio FROM vendite JOIN farmacie ON farmacie.partita_iva = vendite.negozio WHERE vendite.data_fatturazione >= '2020-01-01' AND vendite.data_fatturazione <= '2020-12-31' GROUP BY negozio;"
    },
    {
        "db_id": "farmacia",
        "original": "Seleziona per ogni farmacia, indicandone il nome, il numero dei prodotti che hanno venduto della casa '3A HEALTH CARE S.R.L.'",
        "query": "SELECT farmacie.nome_negozio, COUNT(prodotti.cod_identificativo) FROM farmacie JOIN vendite ON vendite.negozio = farmacie.partita_iva JOIN prodotti ON vendite.prodotto = prodotti.cod_identificativo WHERE 'casaProduzione'='3A HEALTH CARE S.R.L.' GROUP BY(farmacie.partita_iva);"
    },
    {
        "db_id": "farmacia",
        "original": "Quante farmacie ci sono a Roma?",
        "query": "SELECT COUNT(*) FROM 'farmacie' WHERE 'nomeComune'='Roma';"
    },
    {
        "db_id": "farmacia",
        "original": "Calcola il prezzo medio dei prodotti venduti",
        "query": "SELECT AVG(totale) FROM 'vendite'"
    },
    {
        "db_id": "farmacia",
        "original": "Calcola il prezzo medio dei prodotti",
        "query": "SELECT AVG(prezzo_eu) FROM 'prodotti'"
    },
    {
        "db_id": "farmacia",
        "original": "Cosa produce la casa '3A HEALTH CARE S.R.L.'?",
        "query": "SELECT * FROM 'prodotti' WHERE casaProduzione='3A HEALTH CARE S.R.L.'"
    },
    {
        "db_id": "farmacia",
        "original": "Quanti prodotti diversi ha venduto la farmacia 'Aleci Vincenzo'?",
        "query": "SELECT COUNT(DISTINCT(prodotto)) FROM 'vendite' JOIN farmacie ON farmacie.partita_iva = vendite.negozio WHERE farmacie.nome_negozio = 'Aleci Vincenzo';"
    },
    {
        "db_id": "farmacia",
        "original": "Anno per anno calcola quanti prodotti diversi ha venduto la farmacia 'Aleci Vincenzo'?",
        "query": "SELECT COUNT(DISTINCT(prodotto)), YEAR(vendite.data_fatturazione) as anno_vendita FROM vendite JOIN farmacie ON farmacie.partita_iva = vendite.negozio WHERE farmacie.nome_negozio = 'Aleci Vincenzo' GROUP BY anno_vendita;"
    },
    {
        "db_id": "farmacia",
        "original": "Il numero di volte in cui ciscun prodotto e' stato venduto a Roma, riportandone anche la tipologia",
        "query": "SELECT prodotti.tipologiaProd, prodotti.cod_identificativo, COUNT(*) as num_vendite FROM vendite JOIN prodotti ON vendite.prodotto = prodotti.cod_identificativo JOIN farmacie ON farmacie.partita_iva = vendite.negozio WHERE farmacie.nomeComune = 'Roma' GROUP BY prodotti.tipologiaProd, prodotti.cod_identificativo"
    },
    {
        "db_id": "farmacia",
        "original": "Per ogni comune e tipologia di prodotto riporta il numero totale di vendite nel corso del 2020",
        "query": "SELECT farmacie.nomeComune, prodotti.tipologiaProd, COUNT(*) as num_vendite FROM vendite JOIN prodotti ON vendite.prodotto = prodotti.cod_identificativo JOIN farmacie ON farmacie.partita_iva = vendite.negozio WHERE vendite.data_fatturazione >='2020-01-01' AND vendite.data_fatturazione <='2020-12-31' GROUP BY farmacie.nomeComune, prodotti.tipologiaProd;"
    },
    {
        "db_id": "recensioni",
        "original": "Numero di iscritti per centro sportivo riportando il nome del centro sportivo.",
        "query": "SELECT centrosportivo.nome, COUNT(codiceFiscale) FROM iscritto,centrosportivo where idCentro=centrosportivo.id GROUP BY idCentro;"
    },
    {
        "db_id": "recensioni",
        "original": "Identificativo,codice fiscale e sport praticato degli utenti maschi di eta compresa tra i 18 e i 30 anni",
        "query": "SELECT id,codiceFiscale,nome_sport FROM utente WHERE sesso = 'maschile' AND annidiEta BETWEEN 18 AND 30;"
    },
    {
        "db_id": "recensioni",
        "original": "Voto sulla struttura,sulla gestione e sullo staff tecnico delle ultime 5 recensioni effettuate più di recente riportando anche la data.",
        "query": "SELECT data_effettuazione,stato_struttura,gestione,qualifica_staffTecnico FROM recensione ORDER BY data_effettuazione DESC LIMIT 5;"
    },
    {
        "db_id": "recensioni",
        "original": "Nome,cognome e codice certificato delle persone iscritte a centri sportivi di Roma.",
        "query": "SELECT iscritto.nome,iscritto.cognome,iscritto.codiceCertificato FROM centrosportivo,iscritto WHERE centrosportivo.comune = 'Roma' and centrosportivo.id=iscritto.idCentro;"
    },
    {
        "db_id": "recensioni",
        "original": "Cognome,data di nascita,sesso ed eta degli utenti che hanno almeno 31 anni di eta",
        "query": "SELECT i.cognome,i.dataNascita,i.sesso,u.annidiEta FROM iscritto i, utente u WHERE i.codiceFiscale = u.codiceFiscale AND annidiEta > 30;"
    },    
    {
        "db_id": "recensioni",
        "original": "Nome,cognome e codice certificato delle persone iscritte a centri sportivi di Roma.",
        "query": "SELECT iscritto.nome,iscritto.cognome,iscritto.codiceCertificato FROM centrosportivo,iscritto WHERE centrosportivo.comune = 'Roma' and centrosportivo.id=iscritto.idCentro;"
    },
    {
        "db_id": "recensioni",
        "original": "Nome,email,sito e numero di utenti dei centri sportivi che hanno più di due utenti.",
        "query": "SELECT c.nome,c.posta_elettronica,c.portale_online, COUNT(u.id) AS num_utenti FROM centrosportivo c JOIN utente u ON u.idCentro = c.id GROUP BY c.id HAVING num_utenti > 2;"
    },
    {
        "db_id": "recensioni",
        "original": "Seleziona nome e telefono dei centri sportivi che hanno almeno un utente di entrambi i sessi.",
        "query": "SELECT c.nome,c.telefono FROM centrosportivo c WHERE EXISTS(SELECT 1 FROM utente u WHERE u.idCentro = c.id AND u.sesso='maschile') AND EXISTS(SELECT 1 FROM utente u WHERE u.idCentro = c.id AND u.sesso='femminile');"
    },  
    {
        "db_id": "recensioni",
        "original": "Restituire età media degli utenti di ogni centro sportivo riportando anche il nome del centro sportivo.",
        "query": "SELECT c.nome, AVG(u.annidiEta) AS eta_media FROM centrosportivo c JOIN utente u ON u.idCentro = c.id GROUP BY c.id;"
    },
    {
        "db_id": "recensioni",
        "original": "Considerando le città dei centri sportivi,resituisci il numero di iscritti a un centro sportivo per ogni citta riportando anche il nome della città.",
        "query": "SELECT c.comune, COUNT(*) AS num_iscritti FROM iscritto i JOIN centrosportivo c ON i.idCentro = c.id GROUP BY c.comune;"
    },
    {
        "db_id": "recensioni",
        "original": "Dammi il codice fiscale, il suo livello e lo sport che pratica degli utenti che hanno dato il punteggio più alto come stato della struttura",
        "query": "select u.codiceFiscale, u.praticato_a_livello, u.nome_sport from recensione r JOIN utente u ON r.idUtente = u.id where stato_struttura = (select MAX(stato_struttura) from recensione);"
    },
    {
        "db_id": "recensioni",
        "original": "Seleziona il nome, il sito e l'idirizzo delle strutture che hanno l'iscritto con età minore rispetto agl altri",
        "query": "SELECT c.nome, c.portale_online, c.indirizzo FROM centrosportivo c JOIN iscritto i ON i.idCentro = c.id WHERE i.dataNascita = (select max(dataNascita) from iscritto);"
    },
    {
        "db_id": "recensioni",
        "original": "Riporta età media delle utenti.",
        "query": "select avg(annidiEta) from utente where sesso='femminile';"
    },
    {
        "db_id": "recensioni",
        "original": "Riporta tutte le informazioni per i centri sportivi per cui non si ha l'indirizzo di un sito web registrato.",
        "query": "Select * from centrosportivo where portale_online IS NULL;"
    },
    {
        "db_id": "recensioni",
        "original": "Riporta gli id dei centri sportivi che hanno ricevuto come valutazione per la gestione almeno ua volta un punteggio superiore a 2.",
        "query": "SELECT DISTINCT idCentro from recensione where gestione>2;"
    },
    {
        "db_id": "recensioni",
        "original": "Riporta gli id dei centri sportivi che hanno ricevuto come valutazione per la gestione almeno ua volta un punteggio inferiore a 5.",
        "query": "SELECT DISTINCT idCentro from recensione where gestione<5;"
    },
    {
        "db_id": "recensioni",
        "original": "Numero di iscritte per citta di residenza senza riportare la città",
        "query": "SELECT COUNT(codiceFiscale) from iscritto where sesso='femminile' GROUP BY citta;"
    },
    {
        "db_id": "recensioni",
        "original": "Per ogni struttura che ha ricevuto recensioni da parte di iscritte con voto struttura maggiore di 1: nome del centro,codice fiscale e cognome di chi ha effettuato la recensione e data di nascita su cui ordinare in maniera cronologica i record.",
        "query": "SELECT DISTINCT c.nome, i.codiceFiscale,i.cognome,i.dataNascita FROM centrosportivo c JOIN iscritto i ON c.id = i.idCentro JOIN utente u ON i.codiceFiscale = u.codiceFiscale JOIN recensione r ON u.id = r.idUtente   WHERE c.id = 1 AND r.stato_struttura > 1 AND i.sesso='femminile' ORDER BY dataNascita;"
    }
]


        


        

        


        
